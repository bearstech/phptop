#!/usr/bin/perl

# phptop - Analyse quickly system ressource usage across many PHP queries
# Copyright (C) 2009-2019 Bearstech - https://bearstech.com/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case bundling);
use HTTP::Date;
use POSIX qw(setlocale strftime);
use Term::Size;
use Sys::Hostname;
use Time::ParseDate;
use File::ReadBackwards;

my $package_name    = 'phptop';
my $package_version = '0.5.9';
my $package_owner   = 'Copyright (C) 2009-2019 Bearstech - http://bearstech.com/';
my $package_url     = 'http://forge.bearstech.com/trac/wiki/PhpTop';

# Options
my @opts = @ARGV;  # Save @ARGV, we let GetOptions() modify it
my $help;
my $version;
my @log;
my $full_query;
my $goto;
my $domain_only;
my $path_only;
my @sortkeys;
my $count  = 10;
my $span   = 300;
my $output = 'text';
my $relative;
my $average;

# Globals
my @keys  = qw/hit time user sys mem mem_max/;
my %stat;
my $t0    = time();
my $recs  = 0;
my $hits  = 0;
my $bogus = 0;


sub print_short_help {
    print STDERR <<EOF;
Usage: $package_name [options]

Try '$package_name --help' for more information.
EOF
    exit 2;
}

sub print_help {
    print STDERR <<EOF;
Usage: $package_name [options]

Options:
  -a, --average        Show per-hit average values instead of cumulated time
  -c, --count N        Limit output to top N URLs (default is $count)
  -d, --domain         Only use domain, ignore URL path
  -f, --full-query     Consider full URL with CGI parameters
  -g, --goto DATE      Analyse up to given date ('natural' format allowed)
  -h, --help           Display this information
  -l, --log path       Logfiles to parse, you may use several -l and wildcards
  -o, --output mode    Output mode: text or html (default is $output);
  -p, --path-only      Only use path, ignore http://host
  -r, --relative       Print relative hit and time values (in percent)
  -s, --sort key       Sort key: hit, time, user, sys or mem (default is @sortkeys)
  -t, --time N         Parse data from now back to N seconds (default is $span)
  -v, --version        Display version number and copyright info

The -s option can be used multiple times to generate several reports in one go.

Columns explanation:
  Hit       Number of queries
  Time      Total wall clock time (in seconds)
  User      Total CPU time (in seconds)
  Sys       Total system time (in seconds)
  Mem/hit   Average allocated memory per query (MB/hit)
  Mem_max   Maximum allocated memory across queries (MB)
EOF
    exit 0;
}

sub print_version {
    print "$package_name $package_version\n";
    exit 0;
}

# parse_log() is called for every log files and fills up the global %stat hash
#
sub parse_log {
    my $logfile = shift;

    my $reverse;
    my $revmiss = 0;

    if ($logfile =~ /\.gz$/) {
      # We can process gzipped log file, but only in forward mode because you
      # can't seek in gzip streams. Most of the time it will be slower because
      # the info you want is at the end of the log.
      if (!open(LH, '-|', 'gzip', '-cd', $logfile)) {
        warn "$logfile (via gzip): $!";
        return 0;
      }
      $reverse = 0;
    } else {
      if (!tie(*LH, 'File::ReadBackwards', $logfile)) {
        warn "$logfile ($logfile): $!";
        return 0;
      }
      $reverse = 1;
    }

    setlocale(POSIX::LC_NUMERIC, 'C'); # Use . as decimal separator

  # What we parse is ...
  #
  # Apache 2 + mod_fcgid + php-cgi (here with WP):
  # [Tue Nov 26 14:50:09.539796 2019] [fcgid:warn] [pid 20789:tid 140657058330368] [client 1.2.3.4:49839] mod_fcgid: stderr: phptop time:0.438 user:0.400 sys:0.012 mem:301M sqltime:0.003 sqlslower:0.000 sqlcount:21 url:http://www.site.com/feed/
  #
  # Apache 2 + mod_proxy + php-fpm (here with non-WP app):
  # [Tue Nov 26 15:30:19.442303 2019] [proxy_fcgi:error] [pid 5154:tid 140151216924416] [client 1.2.3.4:1370] AH01071: Got error 'PHP message: phptop time:0.000 user:0.000 sys:0.000 mem:002M url:https://www.site.com/feed/\n'
  #
  # Apache 2 + mod_php:
  # [Wed Oct 07 09:24:30.634403 2020] [php7:notice] [pid 19891:tid 140633495107328] [client 123.123.123.1:25655] phptop time:0.003 user:0.003 sys:0.000 mem:002M url:https://myserver/
  #
  # PHP-FPM error.log :
  # [26-Nov-2019 14:28:58 UTC] phptop time:2.030 user:0.600 sys:0.028 mem:002M sqltime:0.290 sqlslower:0.010 sqlcount:276 url:https://www.site.com/feed/
  LINE:
    while (<LH>) {
        chomp;
        next if not /\bphptop (.*)/;
        my $values = $1;
        $recs++;

        # Only keep records within expected time span. If a time stamp is not found or
        # cannot be parsed, we still process the item.
        if (/^\[(.*?)\]/) {
            my $logdate = $1;
            $logdate =~ s/\.\d+\b//g;  # Remove sub-second decimals (Apache >= 2.4)
            my $stamp = str2time($logdate);
            my $skip = defined $stamp && ($t0 - $stamp) > $span;

            if ($reverse and $skip) {
                # Reverse parsing: exit loop when at least 10 out of time records
                # have been seen (to cope with unordered log entries)
                $revmiss++;
                last LINE if $revmiss > 9;
            }
            # Forward parsing: skip record until we are in the right time window.
            # We also obviously skip the record in reverse mode.
            next LINE if $skip;
        }

        # Parse 'key:val' entries
        my %kv;
        my $url;
        $values =~ s/, referer.*//;    # Ignore referer
        $values =~ s/\\n'$//;          # Ignore proxy_fcgi quoting
        $values =~ s/(\d),(\d)/$1.$2/g; # Be independent from the PHP locale, normalize numbers on dot decimal separator
        for (split(/ /, $values)) {
            my ($key, $val) = split(m=:(?!//)=, $_);  # Split on 'key:val', but not 'proto://...'
            if ($key eq 'url') {
              $url = $val;  # URL is the %stat key, we do not store it as a stat value
            } else {
              $kv{$key} = $val;
            }
        }
        next if keys %kv < 4;               # Protect against bogus/wrapped phptop records, count values

        # Fix URLs (depending on options)
        $url =~ s/index\.php\/?//;  # / == /index.php (99.9% of the time)
        $url =~ s/\/+$/\//;         # Ignore multiple trailing slashes
        $url =~ s/\?.*// if not defined $full_query;
        $url =~ s/^https?:\/\/[^\/]+// if defined $path_only;
        $url =~ s/^https?:\/\/([^\/]+).*/$1/ if defined $domain_only;

        # For each 'key:<numeric val>' sum the numeric value per URL
        while(my ($key, $val) = each %kv) {
            # If we have a bogus key/value pair, zap the whole record
            if ($key eq '' or not defined $val or not $val =~ /^[0-9.]+[mM]?$/) {
                delete $stat{$url};  # FIXME: why not ignoring only this sample and keep the record ?
                $bogus++;
                next LINE;
            }

            $val *= 1048576 if $val =~ s/[mM]$//;  # Convert from MB to B if M/m suffix found
            $stat{$url}{$key} += $val;

            # Compute max for mem values
            if ($key eq 'mem') {
                $stat{$url}{'mem_max'} = $val if ($stat{$url}{'mem_max'} || 0) < $val;
            }
        }

        $stat{$url}{'hit'}++;
        $hits++;
    }

    close(LH);
    1;
}

# fix_stat() is called once all log files have been parsed and only once,
# and modifies a few values in %stat for a useful display.
#
sub fix_stat {
    while (my ($url, $i) = each %stat) {
        # Convert 'mem' values from total to 'per hit' average, more meaningful.
        # Also scale memory values from bytes to MB.
        $i->{'mem'} /= $i->{'hit'} * 1048576;
        $i->{'mem_max'} /= 1048576;
    }
}

# raw_cell() is used by raw_report to render a value for a specific key,
# depending on some options and context (defined value or not, relative or
# absolute, etc.)
#
sub raw_cell {
    my ($key, $s) = @_;

    my $val = $s->{$key};
    return '' if not defined $val; # No value -> blank display

    my $timespec = '%.1f';
    my $url_hits = $s->{hit};
    if (defined $average and defined $url_hits) {
        $val /= $url_hits if $key =~ /time|user|sys/;
        $timespec = '%.3f';  # Per hit time values are rather in milliseconds
    }

    if (defined $relative) {
        # Relative value for time columns
        return sprintf('%.1f%%', $val / $span * 100) if $key =~ /time|user|sys/;

        # Relative value for hits
        return sprintf('%.1f%%', $val / $hits * 100) if $key eq 'hit';
    }

    return sprintf('%d', $val) if $key =~ /hit/;  # Hit counts -> plain integer values
    return sprintf($timespec, $val)               # Otherwise, absolute value in seconds
}

# raw_report() compute the tabular report which is then rendered via another routine.
#
sub raw_report {
    my $sortkey = shift;

    my @headers = map {
        my $h = $_;
        $h = "$h/hit" if /^mem$/;  # Mem shows per-hit average values
        ucfirst $h;
    } @keys;
    unshift(@headers, 'URL');

    # We compute grand totals for these keys
    my @sumkeys = qw/hit time user sys/;
    my %sum;
    while (my ($url, $s) = each %stat) {
       $sum{$_} += $s->{$_} foreach @sumkeys;
    }
    my @sums = ("Total (from last $span sec)", map { raw_cell($_, { $_ => $sum{$_}, hit => $hits }) } @keys);

    # Sort queries according to $sortkey (they are all numeric)
    my @rows;
    foreach my $url (sort { $stat{$b}{$sortkey} <=> $stat{$a}{$sortkey} } keys %stat) {
        my @cells = map { raw_cell($_, $stat{$url}) } @keys;
        push(@rows, [ $url, @cells]);
        last if @rows >= $count;
    }

    return { headers => \@headers, rows => \@rows, sums => \@sums };
}

# text_report() pretty prints in a terminal raw_report() result
#
sub text_report {
    # Compute all reports at first, we'll align all report columns
    my %reports;
    $reports{$_} = raw_report($_) foreach @sortkeys;

    # Limit URL column width, depending on output available columns
    my $cols  = $ENV{COLUMNS};
    $cols ||= Term::Size::chars;
    my $colmax = $cols - 1 - 9*@keys;
    die "Terminal width to short, try cheating with COLUMNS env var." if $colmax < 16;

    # Compute URL column width
    my $width = 0;
    foreach my $r (values %reports) {
        foreach (@{$r->{rows}}) {
            my $w = length($_->[0]);
            $width = $w if $w > $width;
        }
    }
    $width = $colmax if $width > $colmax;

    my $report_nb = 0;
    foreach my $key (@sortkeys) {
        my $r = $reports{$key};

        # Table separator (starting from 2nd report)
        print "\n" if $report_nb++;
    
        # Table header
        my @h = map { /^$key(\/hit)?$/i ? ">$_" : $_ } @{$r->{headers}};
        printf("%-${width}s %s\n", shift(@h), join(' ', map { sprintf("%8s", $_) } @h));

        # Rows
        foreach my $cell (@{$r->{rows}}) {
            printf("%-${width}s %s\n", shift(@$cell), join(' ', map { sprintf("%8s", $_) } @$cell));
        }

        # Sums, totals
        my $f = $r->{sums};
        printf("%-${width}s %s\n", shift(@$f), join(' ', map { sprintf("%8s", $_) } @$f));
    }
}

# html_report() renders a report from the inlined template in DATA section
#
sub html_report {
    my $host = hostname();
    my $date = strftime('%Y-%m-%d %H:%M', localtime());
    my $args = join(' ', @opts);

    my $rows;
    foreach my $key (@sortkeys) {
        my $r = raw_report($key);

        my $header_class = sub {
            shift;
            (/^URL/ ? ' url' : '').
            (/^$key(\/hit)?$/i ? ' sortby' : '')
        };
        $rows .= html_report_row('th', $header_class, $r->{headers});

        my $row_class = sub { shift; /^[0-9.]*$/ ? '' : ' url' };
        $rows .= html_report_row('td', $row_class, $_) foreach @{$r->{rows}};

        my $sum_class = sub { shift; ' sum'.(/^[0-9.]*$/ ? '' : ' url') };
        $rows .= html_report_row('td', $sum_class, $r->{sums});
    }
    chomp($rows);

    # Tried with HTML::Template but it was plain ugly to implement the magic
    # in html_report_row with proper HTML/logic separation.
    my %param = (
        TITLE  => "phptop\@$host",
        ROWS   => $rows,
        FOOTER => "Generated by <a href=\"$package_url\">$package_name $package_version</a>".
                  " from <em>$host</em> on $date".
                  ($args ne "" ? " (options: <code>$args</code>)": ""),
    );
    my $tmpl = do { local($/); <DATA> };
    $tmpl =~  s/::(\w+)/$param{$1}/g;
    print $tmpl;
}
sub html_report_row {
    my ($tag, $classfunc, $cells) = @_;

    my $row = "<tr>\n";
    foreach (@$cells) {
        my $class = $classfunc->($_);    # Ask for classes
        $class =~ s/^ +//;               # Put up with ugly concatenation
        $class &&= " class=\"$class\"";  # Only set class if some is set
        $row .= "  <$tag$class>$_</$tag>\n";
    }
    $row .= "</tr>\n";
}


# Main

GetOptions(
    'a|average'      => \$average,
    'c|count=i'      => \$count,
    'd|domain'       => \$domain_only,
    'f|full-query'   => \$full_query,
    'g|goto=s'       => \$goto,
    'h|help'         => \$help,
    'l|log=s'        => \@log,
    'o|output=s'     => \$output,
    'p|path'         => \$path_only,
    'r|relative'     => \$relative,
    's|sort=s'       => \@sortkeys,
    't|time=i'       => \$span,
    'v|version'      => \$version,
)
or print_short_help();

print_help() if $help;
print_version() if $version;

if (defined $domain_only and defined $path_only) {
  print STDERR "Options -d|--domain and -p|--path cannot be specified at the same time.\n";
  exit 1;
}

@sortkeys = ('hit') if not @sortkeys;
foreach my $k (@sortkeys) {
  next if grep { $_ eq $k } @keys;
  print STDERR "Unknown sort key '$k'.\n";
  exit 1;
}

if (not $output =~ /^text|html$/) {
  print STDERR "Unknown output mode '$output'.\n";
  exit 1;
}

if (defined $goto) {
  $t0 = parsedate($goto);
  if (not defined $t0) {
    print STDERR "Could not interpret -g|--goto '$goto'.\n";
    exit 1;
  }
}

my @logfiles;
push(@log, '/var/log/apache2/error*log', '/var/log/apache2/*/error*log') if !@log;
map { push(@logfiles, glob($_)) } @log;

my $parsed = 0;
$parsed += parse_log($_) foreach @logfiles;

if ($parsed == 0) {
    print STDERR "Error: no log files found/processed. Tried: ".join(", ", @log)."\n";
    exit 2;
}
if ($recs == 0) {
    print STDERR "No phptop records found.\n";
    exit 0;
}
if ($hits == 0) {
    print STDERR "Found $recs phptop records, but none selected (see -t option).\n";
    exit 0;
}
if ($bogus >= $hits * .05) {
    print STDERR "Warning: you have more than 5% malformed records ($bogus out of $hits).\n";
}

fix_stat();
text_report() if $output eq 'text';
html_report() if $output eq 'html';


__DATA__
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>::TITLE</title>
    <style type="text/css">
      table.stat { border-collapse: collapse; border-spacing: 0 }
      .stat th { border-bottom: solid black 1px }
      .stat th, .stat td { padding: .15em .25em .15em .75em; text-align: right; border-left: solid #ccc 1px }
      .stat th.url, .stat td.url { padding: .15em .5em .15em 0; text-align: left; border-left: none }
      .stat th.sortby { background-color: black; color: white }
      .stat td.sum { font-weight: bold; padding-bottom: 1em }
      .stat tr:hover td { background-color: #eee }
      .stat a, .stat a:visited { color: black; text-decoration: none }
      #footer, #footer a, #footer a:visited { color: #aaa; margin-top: 1em }
      #footer em { font-style: normal; font-weight: bold }
    </style>
  </head>
  <body>
    <table class="stat">
::ROWS
    </table>
    <p id="footer">::FOOTER</p>
  </body>
</html>
